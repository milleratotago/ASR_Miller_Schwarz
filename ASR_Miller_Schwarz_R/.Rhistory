rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
f_rt_all(400, alpha, beta, mu_C, sigma_C, 0, 0)
alpha <- 1/tau_A
beta <- 1/tau_B
f_rt_all(400, alpha, beta, mu_C, sigma_C, 0, 0)
alpha <- 1/tau_A
alpha
tau_A <- 84
tau_B <- 97
mu_C <- 388
sigma_C <- 38
lambda_exc <- 4
lambda_inh <- 170
soa <- 33
alpha <- 1/tau_A
beta <- 1/tau_B
f_rt_all(400, alpha, beta, mu_C, sigma_C, 0, 0)
f_rt_all(400, alpha, beta, mu_C, sigma_C, 10, 0)
f_rt_all(400, alpha, beta, mu_C, sigma_C, 0, 30)
f_rt_all(400, alpha, beta, mu_C, sigma_C, -10, 30)
f_rt_all(400, alpha, beta, mu_C, sigma_C, -10, 0)
tau_A <- 84
tau_B <- 97
mu_C <- 388
sigma_C <- 38
lambda_exc <- -4
lambda_inh <- 170
soa <- 33
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
tau_A <- 84
tau_B <- 97
mu_C <- 388
sigma_C <- 38
lambda_exc <- -4
lambda_inh <- 170
soa <- 33
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
tau_A <- 84
tau_B <- 97
mu_C <- 388
sigma_C <- 38
lambda_exc <- -4
lambda_inh <- 170
soa <- 33
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
tau_A <- 108
tau_B <- 91
mu_C <- 423
sigma_C <- 47.5
lambda_exc <- -10
lambda_inh <- 67
soa <- 25
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
# Jeff example 2
tau_A <- 108
tau_B <- 91
mu_C <- 423
sigma_C <- 47.5
lambda_exc <- -10
lambda_inh <- 67
soa <- 25
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
# Jeff example 2
tau_A <- 108
tau_B <- 91
mu_C <- 423
sigma_C <- 47.5
lambda_exc <- -10
lambda_inh <- 67
soa <- 25
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
# Jeff example 2
tau_A <- 108
tau_B <- 91
mu_C <- 423
sigma_C <- 47.5
lambda_exc <- -10
lambda_inh <- 67
soa <- 25
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
rm(list = ls())
source('D:/Miller/ASR_miller_schwarz/ASR_miller_schwarz/asr_toolkit_examples.R')
# Jeff example 2
tau_A <- 108
tau_B <- 91
mu_C <- 423
sigma_C <- 47.5
lambda_exc <- -10
lambda_inh <- 67
soa <- 25
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
# Jeff example 3
tau_A <- 84
tau_B <- 97
mu_C <- 388
sigma_C <- 38
lambda_exc <- -4
lambda_inh <- 170
soa <- 33
asr_pred_df <- asr_predictions(tau_A, tau_B, mu_C, sigma_C, lambda_inh, lambda_exc, soa)
head(asr_pred_df)
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
print("Working...please wait")
# Load some sample data to which the model can be fit
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
# Fit each subject individually. Here, we fit subject 2
subject_02 <- test_data_df[test_data_df$SubNo == 2,]
# Set up separate vectors of the congruent and incongruent reaction times
subject_02_con <- subject_02[subject_02$Congru == 1,]
subject_02_inc <- subject_02[subject_02$Congru == 2,]
View(subject_02_inc)
obsRTcon = test_data_df$RT[test_data_df$SubNo == 2]
obsRTcon = test_data_df$RT[test_data_df$SubNo == 2 & test_data_df$Congru==1]
```{r setup, include=FALSE}
library(pracma)
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
head(test_data_df)
write.csv("test.csv", col.names = TRUE)
?write.csv
write.csv(test_data_df,"test.csv", col.names = TRUE)
write.csv(test_data_df,"test.csv")
test_data_df$PFno=[];
test_data_df$PFno=();
test_data_df$PFno <- NULL
test_data_df$PFresp <- NULL
test_data_df$RTinBounds <- NULL
write.csv(test_data_df,"test.csv")
test_data_df$BadSub <- NULL
test_data_df$Practice <- NULL
test_data_df$Effector <- NULL
write.csv(test_data_df,"test.csv")
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
header(test_data_df)
head(test_data_df)
iSub = 2
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru==1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru==2]
# Function asr-fit finds the maximum likelihood estimates of the model parameters
# parameters that result in the smallest error) The output object of asr_fit
# contains estimate and error values for all starting parameters as well as
# the best estimates. User can do further work with those data, as desired.
fixed_exc <- asr_fit(subject_02_con$RT, subject_02_inc$RT, soa)
fixed_exc
fixed_exc$BestParameters
print("best parameters")
fixed_exc$BestParameters
print("best parameters for subject ",iSub)
cat("best parameters for subject ",iSub)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru==1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(subject_02_con$RT, subject_02_inc$RT, soa)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
rm(list=ls())
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
head(test_data_df)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
source("asr_fit.R")
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
head(test_data_df)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
&& test_data_df$Congru==2]
test_data_df$RT[test_data_df$SubNo == iSub]
test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru==1]
test_data_df$RT[test_data_df$SubNo == iSub && test_data_df$Congru == 1]
test_data_df$RT[test_data_df$SubNo == iSub & test_data_df$Congru == 1]
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
allBest = c()
allBest = c(allBest,fixed_exc$BestParameters)
allBest = c(allBest,fixed_exc$BestParameters)
allBest = c(allBest,fixed_exc$BestParameters)
View(allBest)
View(allBest)
alldf = frame(allBest)
alldf = data.frame(allBest)
alldf2 = rbind(alldf,allBest)
tmp$a=1
tmp = data.frame
tmp$a = 1
tmp = data.frame()
tmp$a = 1
tmp = rbind(tmp,1)
tmp
tmp = rbind(tmp,2)
tmp
tmp = rbind(tmp,21)
tmp
tmp2 = data.frame()
tmp2$a = 1
tmp2 = rbind(tmp2,a=1,b=2)
tmp2
a <- fixed_exc$BestParameters
tmp6 <- data.frame()
tmp6 = rbind(tmp6,a)
tmp6 = rbind(tmp6,a)
tmp6 = rbind(tmp6,a)
show(tmp6)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(iSub,currentRow,fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(iSub,currentRow) # ,fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
currentRow <- fixed_exc$BestParameters
currentRow <- c(iSub,currentRow) # ,fixed_exc$MinError)
View(allBest)
View(allBest)
currentRow
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(SubNo = iSub,currentRow) # ,fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
fixed_exc$BestParameters
}
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(SubNo = iSub,currentRow, BestError = fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
currentRow
}
typeof(allBest)
bob =
as.data.frame(allBest)
typeof(bob)
allBest
rm(list=ls())
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(SubNo = iSub,currentRow, BestError = fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
currentRow
}
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
head(test_data_df)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
for (iSub in c(2,3))
{
# Fit each subject individually.
# first select out the congruent & incongruent RTs for this subject
# you may also exclude errors & outlier RTs, but that is not illustrated in this example.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model parameters
# and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon, obsRTinc, soa)
currentRow <- fixed_exc$BestParameters
currentRow <- c(SubNo = iSub,currentRow, BestError = fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
cat("best parameters for subject ",iSub)
currentRow
}
paste("best parameters for subject ",iSub)
paste("best parameters for subject ",iSub)
currentRow
knitr::opts_chunk$set(echo = TRUE)
library(gamlss)
library(pracma)
source("asr_fit.R")
source("asr_distribution.R")
source("asr_predictions.R")
test_data_df <- read.csv("asr_sample_data.csv", header = TRUE)
head(test_data_df)
# Initialise soa based on the experimental design from which
# the data are derived
soa <- 0
# Make an empty data frame to hold the parameter estimates for each participant
allBest = data.frame()
iSub = 2
# Fit each subject individually.
paste("fitting subject",iSub)
# first select out the congruent & incongruent RTs for this subject.
# you should probably also exclude errors & outlier RTs,
# but that is not illustrated.
# If you have an experimental factor (e.g. SOA) such that there are
# multiple congruent/incongruent pairs per subject then you would
# fit each one separately.
obsRTcon <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru == 1]
obsRTinc <- test_data_df$RT[test_data_df$SubNo == iSub
& test_data_df$Congru==2]
# Function asr_fit finds the maximum likelihood estimates of the model
# parameters and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit
# Now extract the parameters for this subject, add the subject ID,
# and add the results as a new row in the allBest data_frame.
currentRow <- fixed_exc$BestParameters
View(fixed_exc)
View(fixed_exc)
View(fixed_exc)
View(fixed_exc)
# Function asr_fit finds the maximum likelihood estimates of the model
# parameters and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon,obsRTinc)
# Function asr_fit finds the maximum likelihood estimates of the model
# parameters and stores them in the BestParameters field of the output.
# By default, asr_fit assumes that lambda_exc is fixed at 0.
fixed_exc <- asr_fit(obsRTcon,obsRTinc,soa)
# Now extract the parameters for this subject, add the subject ID,
# and add the results as a new row in the allBest data_frame.
currentRow <- fixed_exc$BestParameters
currentRow <- c(SubNo = iSub,currentRow, BestError = fixed_exc$MinError)
allBest = rbind(allBest,currentRow)
rm(list=ls())
source('C:/R/Projects/RT/ASR_prod/ASR_Miller_Schwarz_R/asr_fit.R')
rm(list=ls())
?library
